   1               		.file	"DeviceStandardReq.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	USB_Device_ProcessControlRequest
  13               	USB_Device_ProcessControlRequest:
  14               	.LFB64:
  15               		.file 1 "../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c"
   1:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** /*
   2:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****               
   5:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** */
   8:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
   9:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** /*
  10:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  12:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  21:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** */
  30:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  31:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #include "USBMode.h"
  33:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  34:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  36:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #define  __INCLUDE_FROM_DEVICESTDREQ_C
  37:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #include "DeviceStandardReq.h"
  38:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  39:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** uint8_t USB_ConfigurationNumber;
  40:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  41:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_SELF_POWER)
  42:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** bool    USB_CurrentlySelfPowered;
  43:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
  44:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  45:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_REMOTE_WAKEUP)
  46:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** bool    USB_RemoteWakeupEnabled;
  47:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
  48:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  49:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** void USB_Device_ProcessControlRequest(void)
  50:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
  16               		.loc 1 50 0
  17               		.cfi_startproc
  18 0000 1F93      		push r17
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 17, -2
  22 0002 CF93      		push r28
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 28, -3
  26 0004 DF93      		push r29
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 29, -4
  30 0006 00D0      		rcall .
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 7
  33 0008 CDB7      		in r28,__SP_L__
  34 000a DEB7      		in r29,__SP_H__
  35               	.LCFI4:
  36               		.cfi_def_cfa_register 28
  37               	/* prologue: function */
  38               	/* frame size = 2 */
  39               	/* stack size = 5 */
  40               	.L__stack_usage = 5
  41               	.LVL0:
  42 000c E0E0      		ldi r30,lo8(USB_ControlRequest)
  43 000e F0E0      		ldi r31,hi8(USB_ControlRequest)
  44               	.LVL1:
  45               	.L3:
  46               	.LBB126:
  47               	.LBB127:
  48               	.LBB128:
  49               		.file 2 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****               
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 155:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 161:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 167:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 181:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 188:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 204:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 205:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 211:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 230:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 231:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 237:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 247:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 248:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 261:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 269:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 270:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 279:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 285:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 286:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 298:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 300:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 302:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 303:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 311:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 314:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 315:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 323:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 325:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 326:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 332:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 334:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 335:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 342:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 344:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 345:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 358:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 360:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 361:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 368:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 370:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 371:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 380:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 382:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 383:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 393:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 395:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 396:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 405:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 406:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 407:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 408:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 417:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 419:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 420:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 429:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 430:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 431:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 432:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 443:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 444:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 445:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 453:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 455:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 460:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 468:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 470:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 474:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 475:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 489:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 491:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 492:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 499:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 501:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 502:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 511:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 513:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 514:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 518:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 520:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 521:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 528:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 530:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 531:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 538:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 540:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 541:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 550:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
  50               		.loc 2 550 0 discriminator 2
  51 0010 8091 F100 		lds r24,241
  52               	.LBE128:
  53               	.LBE127:
  51:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	bool     RequestHandled = false;
  52:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
  53:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
  54:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  55:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_Byte();
  54               		.loc 1 55 0 discriminator 2
  55 0014 8193      		st Z+,r24
  56               	.LVL2:
  54:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  57               		.loc 1 54 0 discriminator 2
  58 0016 80E0      		ldi r24,hi8(USB_ControlRequest+8)
  59 0018 E030      		cpi r30,lo8(USB_ControlRequest+8)
  60 001a F807      		cpc r31,r24
  61 001c 01F4      		brne .L3
  62               	.LBE126:
  56:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  
  57:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  63               		.loc 1 57 0
  64 001e 2091 0000 		lds r18,USB_ControlRequest
  65               	.LVL3:
  58:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
  59:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bRequest)
  66               		.loc 1 59 0
  67 0022 3091 0000 		lds r19,USB_ControlRequest+1
  68 0026 832F      		mov r24,r19
  69 0028 90E0      		ldi r25,0
  70 002a 8A30      		cpi r24,10
  71 002c 9105      		cpc r25,__zero_reg__
  72 002e 00F0      		brlo .+2
  73 0030 00C0      		rjmp .L4
  74 0032 FC01      		movw r30,r24
  75               	.LVL4:
  76 0034 E050      		subi r30,lo8(-(gs(.L6)))
  77 0036 F040      		sbci r31,hi8(-(gs(.L6)))
  78 0038 0C94 0000 		jmp __tablejump2__
  79               		.section	.progmem.gcc_sw_table.USB_Device_ProcessControlRequest,"a",@progbits
  80               		.p2align	1
  81               	.L6:
  82 0000 0000      		.word gs(.L5)
  83 0002 0000      		.word gs(.L7)
  84 0004 0000      		.word gs(.L4)
  85 0006 0000      		.word gs(.L7)
  86 0008 0000      		.word gs(.L4)
  87 000a 0000      		.word gs(.L8)
  88 000c 0000      		.word gs(.L9)
  89 000e 0000      		.word gs(.L4)
  90 0010 0000      		.word gs(.L10)
  91 0012 0000      		.word gs(.L11)
  92               		.section	.text.USB_Device_ProcessControlRequest
  93               	.L5:
  60:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
  61:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetStatus:
  62:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  94               		.loc 1 62 0
  95 003c 2038      		cpi r18,lo8(-128)
  96 003e 01F0      		breq .L12
  97               		.loc 1 62 0 is_stmt 0 discriminator 1
  98 0040 2238      		cpi r18,lo8(-126)
  99 0042 01F0      		breq .+2
 100 0044 00C0      		rjmp .L4
 101               	.LVL5:
 102               	.LBB129:
 103               	.LBB130:
  63:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  64:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  65:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetStatus();
  66:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  67:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  68:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  69:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  70:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_ClearFeature:
  71:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetFeature:
  72:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  73:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  74:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  75:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_ClearSetFeature();
  76:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  77:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  78:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  79:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  80:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetAddress:
  81:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
  82:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  83:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_SetAddress();
  84:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  85:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  86:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
  87:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  88:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetDescriptor:
  89:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  90:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			    (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
  91:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
  92:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetDescriptor();
  93:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
  94:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
  95:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
  96:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
  97:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_GetConfiguration:
  98:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
  99:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 100:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_GetConfiguration();
 101:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
 102:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 103:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 104:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 105:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQ_SetConfiguration:
 106:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 107:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 108:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				USB_Device_SetConfiguration();
 109:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				RequestHandled = true;
 110:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 111:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 112:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 113:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 114:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 115:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (!(RequestHandled))
 116:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  EVENT_USB_Device_UnhandledControlRequest();
 117:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  
 118:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 119:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 120:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		Endpoint_StallTransaction();
 121:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		Endpoint_ClearSETUP();		
 122:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 123:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 124:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 125:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_SetAddress(void)
 126:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 127:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 128:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 129:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 130:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 131:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 132:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 133:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()))
 134:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 135:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 136:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 137:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 138:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 139:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 140:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 141:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_Device_SetDeviceAddress(DeviceAddress);
 142:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 143:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	return;
 144:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 145:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 146:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_SetConfiguration(void)
 147:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 148:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if defined(FIXED_NUM_CONFIGURATIONS)
 149:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 150:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  return;
 151:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #else
 152:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if defined(USE_FLASH_DESCRIPTORS)
 153:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_FLASH
 154:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 155:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_EEPROM
 156:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_SRAM_DESCRIPTORS)
 157:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		#define MemoryAddressSpace  MEMSPACE_SRAM
 158:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#else
 159:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		uint8_t MemoryAddressSpace;
 160:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 161:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 162:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_Descriptor_Device_t* DevDescriptorPtr;
 163:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 164:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
 165:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 166:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                               , &MemoryAddressSpace
 167:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 168:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                               ) == NO_DESCRIPTOR)
 169:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 170:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 171:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 172:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 173:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (MemoryAddressSpace == MEMSPACE_FLASH)
 174:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 175:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations
 176:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 177:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 178:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
 179:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 180:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurati
 181:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 182:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 183:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else
 184:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 185:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 186:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		  return;
 187:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 188:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 189:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 190:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 191:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 192:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 193:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 194:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 195:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 196:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 197:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 198:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 199:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 200:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 201:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** void USB_Device_GetConfiguration(void)
 202:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 203:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 204:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 205:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Byte(USB_ConfigurationNumber);
 206:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 207:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 208:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 209:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 210:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 211:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 212:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static char USB_Device_NibbleToASCII(uint8_t Nibble)
 213:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 214:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Nibble = ((Nibble & 0x0F) + '0');
 215:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
 216:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 217:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 218:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_GetInternalSerialDescriptor(void)
 219:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 220:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	struct
 221:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 222:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		USB_Descriptor_Header_t Header;
 223:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		int16_t                 UnicodeString[20];
 224:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	} SignatureDescriptor;
 225:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 226:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Type = DTYPE_String;
 227:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 228:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 229:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t SigReadAddress = 0x0E;
 230:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 231:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 232:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 233:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 234:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		{
 235:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 236:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
 237:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (SerialCharNum & 0x01)
 238:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 239:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				SerialByte >>= 4;
 240:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				SigReadAddress++;
 241:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			}
 242:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
 243:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
 244:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		}
 245:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 246:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 247:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 248:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 249:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 250:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 251:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 252:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 253:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 254:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 255:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_GetDescriptor(void)
 256:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 257:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	void*    DescriptorPointer;
 258:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint16_t DescriptorSize;
 259:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 260:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 261:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t  DescriptorAddressSpace;
 262:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 263:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 264:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 265:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 266:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 267:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		USB_Device_GetInternalSerialDescriptor();
 268:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 269:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 270:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 271:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 272:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 273:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                                                 &DescriptorPointer
 274:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRI
 275:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	                                                 , &DescriptorAddressSpace
 276:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 277:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 													 )) == NO_DESCRIPTOR)
 278:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 279:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		return;
 280:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 281:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 282:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 283:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 284:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if defined(USE_RAM_DESCRIPTORS)
 285:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 286:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 287:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 288:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#elif defined(USE_FLASH_DESCRIPTORS)
 289:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 290:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#else
 291:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (DescriptorAddressSpace == MEMSPACE_FLASH)
 292:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 293:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
 294:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 295:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	else
 296:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);	
 297:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 298:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 299:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 300:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 301:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 302:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_GetStatus(void)
 303:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 304:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t CurrentStatus = 0;
 305:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 306:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType)
 307:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 308:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_SELF_POWER) || !defined(NO_DEVICE_REMOTE_WAKEUP)	
 309:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
 310:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(NO_DEVICE_SELF_POWER)
 311:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (USB_CurrentlySelfPowered)
 312:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
 313:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 314:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 315:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
 316:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (USB_RemoteWakeupEnabled)
 317:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 318:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	#endif
 319:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 320:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 321:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(CONTROL_ONLY_DEVICE)
 322:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
 323:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 104               		.loc 1 323 0 is_stmt 1
 105 0046 8091 0000 		lds r24,USB_ControlRequest+4
 106 004a 8770      		andi r24,lo8(7)
 107               	.LVL6:
 108               	.LBB131:
 109               	.LBB132:
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 110               		.loc 2 299 0
 111 004c 8093 E900 		sts 233,r24
 112               	.LBE132:
 113               	.LBE131:
 114               	.LBB133:
 115               	.LBB134:
 511:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 116               		.loc 2 511 0
 117 0050 9091 EB00 		lds r25,235
 118 0054 95FB      		bst r25,5
 119 0056 9927      		clr r25
 120 0058 90F9      		bld r25,0
 121               	.LVL7:
 122               	.LBE134:
 123               	.LBE133:
 124               	.LBB135:
 125               	.LBB136:
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 126               		.loc 2 299 0
 127 005a 1092 E900 		sts 233,__zero_reg__
 128 005e 00C0      		rjmp .L14
 129               	.LVL8:
 130               	.L12:
 131               	.LBE136:
 132               	.LBE135:
 304:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t CurrentStatus = 0;
 133               		.loc 1 304 0
 134 0060 9091 0000 		lds r25,USB_CurrentlySelfPowered
 135               	.LVL9:
 136               	.L14:
 137               	.LBB137:
 138               	.LBB138:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 139               		.loc 2 442 0
 140 0064 8091 E800 		lds r24,232
 141 0068 877F      		andi r24,lo8(-9)
 142 006a 8093 E800 		sts 232,r24
 143               	.LVL10:
 144               	.LBE138:
 145               	.LBE137:
 146               	.LBB139:
 147               	.LBB140:
 551:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 552:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 553:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 562:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 563:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 564:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 565:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 566:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 567:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 568:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 569:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
 570:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void)
 571:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 572:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 573:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 574:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 575:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 576:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 577:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 578:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 579:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 580:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 581:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 582:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 583:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 584:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 585:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void)
 586:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 587:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				union
 588:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 589:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 590:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 591:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 592:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 593:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 594:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 595:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 596:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 597:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 598:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 599:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 600:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 601:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 602:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 603:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 604:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 605:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 606:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 607:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void)
 608:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 609:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				union
 610:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 611:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 612:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 613:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 614:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 615:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 616:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 617:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 618:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 619:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 620:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 621:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 622:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 623:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 624:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 625:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 626:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 627:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 628:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 629:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
 630:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 631:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 148               		.loc 2 631 0
 149 006e 9093 F100 		sts 241,r25
 632:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 150               		.loc 2 632 0
 151 0072 1092 F100 		sts 241,__zero_reg__
 152 0076 00C0      		rjmp .L43
 153               	.LVL11:
 154               	.L7:
 155               	.LBE140:
 156               	.LBE139:
 157               	.LBE130:
 158               	.LBE129:
  72:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 159               		.loc 1 72 0
 160 0078 822F      		mov r24,r18
 161 007a 8D7F      		andi r24,lo8(-3)
 162 007c 01F0      		breq .+2
 163 007e 00C0      		rjmp .L4
 164               	.LBB141:
 165               	.LBB142:
 324:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 325:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			CurrentStatus = Endpoint_IsStalled();
 326:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 327:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
 328:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 329:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;
 330:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 331:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		default:
 332:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			return;
 333:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	}
 334:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 335:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 336:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 337:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Word_LE(CurrentStatus);
 338:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 339:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	
 340:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 341:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 342:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 343:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** static void USB_Device_ClearSetFeature(void)
 344:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** {
 345:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 166               		.loc 1 345 0
 167 0080 2230      		cpi r18,lo8(2)
 168 0082 01F0      		breq .+2
 169 0084 00C0      		rjmp .L27
 346:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	{
 347:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(NO_DEVICE_REMOTE_WAKEUP)			
 348:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQREC_DEVICE:
 349:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
 350:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 351:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			else
 352:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			  return;
 353:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			
 354:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			break;			
 355:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #endif
 356:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** #if !defined(CONTROL_ONLY_DEVICE)
 357:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		case REQREC_ENDPOINT:
 358:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 170               		.loc 1 358 0
 171 0086 8091 0000 		lds r24,USB_ControlRequest+2
 172 008a 8111      		cpse r24,__zero_reg__
 173 008c 00C0      		rjmp .L17
 174               	.LBB143:
 359:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			{
 360:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 175               		.loc 1 360 0
 176 008e 2091 0000 		lds r18,USB_ControlRequest+4
 177               	.LVL12:
 178 0092 2770      		andi r18,lo8(7)
 179               	.LVL13:
 361:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				
 362:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				if (EndpointIndex == ENDPOINT_CONTROLEP)
 180               		.loc 1 362 0
 181 0094 01F4      		brne .+2
 182 0096 00C0      		rjmp .L27
 183               	.LVL14:
 184               	.LBB144:
 185               	.LBB145:
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 186               		.loc 2 299 0
 187 0098 2093 E900 		sts 233,r18
 188               	.LVL15:
 189               	.LBE145:
 190               	.LBE144:
 191               	.LBB146:
 192               	.LBB147:
 342:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 193               		.loc 2 342 0
 194 009c 8091 EB00 		lds r24,235
 195               	.LBE147:
 196               	.LBE146:
 363:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				  return;
 364:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 365:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				Endpoint_SelectEndpoint(EndpointIndex);
 366:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 367:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				if (!(Endpoint_IsEnabled()))
 197               		.loc 1 367 0
 198 00a0 80FF      		sbrs r24,0
 199 00a2 00C0      		rjmp .L27
 200               	.LBB148:
 201               	.LBB149:
 489:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 202               		.loc 2 489 0
 203 00a4 8091 EB00 		lds r24,235
 204               	.LBE149:
 205               	.LBE148:
 368:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				  return;
 369:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 
 370:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 206               		.loc 1 370 0
 207 00a8 3330      		cpi r19,lo8(3)
 208 00aa 01F4      		brne .L20
 209               	.LBB151:
 210               	.LBB150:
 489:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 211               		.loc 2 489 0
 212 00ac 8062      		ori r24,lo8(32)
 213 00ae 00C0      		rjmp .L42
 214               	.L20:
 215               	.LBE150:
 216               	.LBE151:
 217               	.LBB152:
 218               	.LBB153:
 499:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 219               		.loc 2 499 0
 220 00b0 8061      		ori r24,lo8(16)
 221 00b2 8093 EB00 		sts 235,r24
 222               	.LVL16:
 223               	.LBE153:
 224               	.LBE152:
 225               	.LBB154:
 226               	.LBB155:
 311:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 227               		.loc 2 311 0
 228 00b6 81E0      		ldi r24,lo8(1)
 229 00b8 90E0      		ldi r25,0
 230 00ba 022E      		mov r0,r18
 231 00bc 00C0      		rjmp 2f
 232               		1:
 233 00be 880F      		lsl r24
 234               		2:
 235 00c0 0A94      		dec r0
 236 00c2 02F4      		brpl 1b
 237 00c4 8093 EA00 		sts 234,r24
 312:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 238               		.loc 2 312 0
 239 00c8 1092 EA00 		sts 234,__zero_reg__
 240               	.LBE155:
 241               	.LBE154:
 242               	.LBB156:
 243               	.LBB157:
 518:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 244               		.loc 2 518 0
 245 00cc 8091 EB00 		lds r24,235
 246 00d0 8860      		ori r24,lo8(8)
 247               	.LVL17:
 248               	.L42:
 249 00d2 8093 EB00 		sts 235,r24
 250               	.LVL18:
 251               	.L17:
 252               	.LBE157:
 253               	.LBE156:
 254               	.LBE143:
 255               	.LBB158:
 256               	.LBB159:
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 257               		.loc 2 299 0
 258 00d6 1092 E900 		sts 233,__zero_reg__
 259               	.LBE159:
 260               	.LBE158:
 261               	.LBB160:
 262               	.LBB161:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 263               		.loc 2 442 0
 264 00da 8091 E800 		lds r24,232
 265 00de 877F      		andi r24,lo8(-9)
 266 00e0 00C0      		rjmp .L44
 267               	.LVL19:
 268               	.L8:
 269               	.LBE161:
 270               	.LBE160:
 271               	.LBE142:
 272               	.LBE141:
  81:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 273               		.loc 1 81 0
 274 00e2 2111      		cpse r18,__zero_reg__
 275 00e4 00C0      		rjmp .L4
 276               	.LBB162:
 277               	.LBB163:
 127:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 278               		.loc 1 127 0
 279 00e6 1091 0000 		lds r17,USB_ControlRequest+2
 280               	.LVL20:
 281               	.LBB164:
 282               	.LBB165:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 283               		.loc 2 442 0
 284 00ea 8091 E800 		lds r24,232
 285 00ee 877F      		andi r24,lo8(-9)
 286 00f0 8093 E800 		sts 232,r24
 287               	.LBE165:
 288               	.LBE164:
 131:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 289               		.loc 1 131 0
 290 00f4 0E94 0000 		call Endpoint_ClearStatusStage
 291               	.LVL21:
 292               	.L21:
 293               	.LBB166:
 294               	.LBB167:
 405:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 295               		.loc 2 405 0
 296 00f8 8091 E800 		lds r24,232
 297               	.LBE167:
 298               	.LBE166:
 133:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()))
 299               		.loc 1 133 0
 300 00fc 80FD      		sbrc r24,0
 301 00fe 00C0      		rjmp .L46
 135:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 		if (USB_DeviceState == DEVICE_STATE_Unattached)
 302               		.loc 1 135 0
 303 0100 8EB3      		in r24,0x1e
 304 0102 8111      		cpse r24,__zero_reg__
 305 0104 00C0      		rjmp .L21
 306 0106 00C0      		rjmp .L27
 307               	.L46:
 127:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 308               		.loc 1 127 0
 309 0108 812F      		mov r24,r17
 310 010a 8F77      		andi r24,lo8(127)
 139:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 311               		.loc 1 139 0
 312 010c 01F0      		breq .L28
 313 010e 93E0      		ldi r25,lo8(3)
 314 0110 00C0      		rjmp .L23
 315               	.L28:
 316 0112 92E0      		ldi r25,lo8(2)
 317               	.L23:
 318 0114 9EBB      		out 0x1e,r25
 319               	.LVL22:
 320               	.LBB168:
 321               	.LBB169:
 322               		.file 3 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****               
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"	
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        \n\n
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode -- refer to the USB 2.0 standard.
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        \n
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Enables the device mode Start Of Frame events. When enabled, this causes the
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to the
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  at the start of each USB frame when enumerated in device mode.
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void)
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Enable(USB_INT_SOFI);
 151:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 152:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				
 153:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Disables the device mode Start Of Frame events. When disabled, this stop the firing of the
 154:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 155:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 156:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 157:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_DisableSOFEvents(void)
 158:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 159:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Disable(USB_INT_SOFI);
 160:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 161:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 162:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
 163:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Function to retrieve a given descriptor's size and memory location from the given descriptor
 164:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  index and language ID. This function MUST be overridden in the user application (added with 
 165:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  prototype and name so that the library can call it to retrieve descriptor data.
 166:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 167:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wValue               The type of the descriptor to retrieve in the upper byte, an
 168:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  lower byte (when more than one descriptor of the given type 
 169:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  case of string descriptors). The type may be one of the stan
 170:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  in the DescriptorTypes_t enum, or may be a class-specific de
 171:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wIndex               The language ID of the string to return if the wValue type i
 172:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  otherwise zero for standard descriptors, or as defined in a 
 173:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  standards.
 174:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[out] DescriptorAddress   Pointer to the descriptor in memory. This should be set by t
 175:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  the address of the descriptor.
 176:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \param[out] MemoryAddressSpace  A value from the \ref USB_DescriptorMemorySpaces_t enum to i
 177:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  space in which the descriptor is stored. This parameter does
 178:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *                                  of the USE_*_DESCRIPTORS compile time options is used.
 179:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 180:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note By default, the library expects all descriptors to be located in flash memory via the 
 181:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        If descriptors should be located in RAM or EEPROM instead (to speed up access in the c
 182:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        allow the descriptors to be changed dynamically at runtime) either the USE_RAM_DESCRIP
 183:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        USE_EEPROM_DESCRIPTORS tokens may be defined in the project makefile and passed to the
 184:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        switch.
 185:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 186:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \return Size in bytes of the descriptor if it exists, zero or \ref NO_DESCRIPTOR otherwise.
 187:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 188:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 189:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    const uint8_t wIndex,
 190:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    void** const DescriptorAddress
 191:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESC
 192:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    , uint8_t* MemoryAddressSpace
 193:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
 194:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			                                    ) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(3);
 195:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
 196:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Private Interface - For use in library only: */
 197:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	#if !defined(__DOXYGEN__)
 198:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 199:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 200:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 201:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void)
 202:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 203:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDCON |=  (1 << LSM);
 204:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 205:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 206:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 207:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void)
 208:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 209:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDCON &= ~(1 << LSM);
 210:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			}
 211:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
 212:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 213:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
 214:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
 215:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 216:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 323               		.loc 3 216 0
 324 0116 8068      		ori r24,lo8(-128)
 325 0118 8093 E300 		sts 227,r24
 326 011c 00C0      		rjmp .L27
 327               	.LVL23:
 328               	.L9:
 329               	.LBE169:
 330               	.LBE168:
 331               	.LBE163:
 332               	.LBE162:
  89:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 333               		.loc 1 89 0
 334 011e 2058      		subi r18,lo8(-(-128))
 335               	.LVL24:
 336 0120 2230      		cpi r18,lo8(2)
 337 0122 00F0      		brlo .+2
 338 0124 00C0      		rjmp .L4
 339               	.LBB170:
 340               	.LBB171:
 272:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 341               		.loc 1 272 0
 342 0126 AE01      		movw r20,r28
 343 0128 4F5F      		subi r20,-1
 344 012a 5F4F      		sbci r21,-1
 345 012c 6091 0000 		lds r22,USB_ControlRequest+4
 346 0130 8091 0000 		lds r24,USB_ControlRequest+2
 347 0134 9091 0000 		lds r25,USB_ControlRequest+2+1
 348 0138 0E94 0000 		call CALLBACK_USB_GetDescriptor
 349               	.LVL25:
 350 013c 0097      		sbiw r24,0
 351 013e 01F0      		breq .L27
 352               	.LBB172:
 353               	.LBB173:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 354               		.loc 2 442 0
 355 0140 2091 E800 		lds r18,232
 356 0144 277F      		andi r18,lo8(-9)
 357 0146 2093 E800 		sts 232,r18
 358               	.LBE173:
 359               	.LBE172:
 289:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 360               		.loc 1 289 0
 361 014a BC01      		movw r22,r24
 362 014c 8981      		ldd r24,Y+1
 363 014e 9A81      		ldd r25,Y+2
 364               	.LVL26:
 365 0150 0E94 0000 		call Endpoint_Write_Control_PStream_LE
 366               	.LVL27:
 367               	.LBB174:
 368               	.LBB175:
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 369               		.loc 2 469 0
 370 0154 8091 E800 		lds r24,232
 371 0158 8B77      		andi r24,lo8(123)
 372 015a 8093 E800 		sts 232,r24
 373 015e 00C0      		rjmp .L27
 374               	.LVL28:
 375               	.L10:
 376               	.LBE175:
 377               	.LBE174:
 378               	.LBE171:
 379               	.LBE170:
  98:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 380               		.loc 1 98 0
 381 0160 2038      		cpi r18,lo8(-128)
 382 0162 01F4      		brne .L4
 383               	.LBB176:
 384               	.LBB177:
 385               	.LBB178:
 386               	.LBB179:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 387               		.loc 2 442 0
 388 0164 8091 E800 		lds r24,232
 389 0168 877F      		andi r24,lo8(-9)
 390 016a 8093 E800 		sts 232,r24
 391               	.LBE179:
 392               	.LBE178:
 205:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_Write_Byte(USB_ConfigurationNumber);
 393               		.loc 1 205 0
 394 016e 8091 0000 		lds r24,USB_ConfigurationNumber
 395               	.LVL29:
 396               	.LBB180:
 397               	.LBB181:
 562:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 398               		.loc 2 562 0
 399 0172 8093 F100 		sts 241,r24
 400               	.LVL30:
 401               	.L43:
 402               	.LBE181:
 403               	.LBE180:
 404               	.LBB182:
 405               	.LBB183:
 454:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 406               		.loc 2 454 0
 407 0176 8091 E800 		lds r24,232
 408 017a 8E77      		andi r24,lo8(126)
 409               	.LVL31:
 410               	.L44:
 411 017c 8093 E800 		sts 232,r24
 412               	.LBE183:
 413               	.LBE182:
 208:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 414               		.loc 1 208 0
 415 0180 0E94 0000 		call Endpoint_ClearStatusStage
 416               	.LVL32:
 417 0184 00C0      		rjmp .L27
 418               	.LVL33:
 419               	.L11:
 420               	.LBE177:
 421               	.LBE176:
 106:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 422               		.loc 1 106 0
 423 0186 2111      		cpse r18,__zero_reg__
 424 0188 00C0      		rjmp .L4
 425               	.LBB184:
 426               	.LBB185:
 149:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 427               		.loc 1 149 0
 428 018a 9091 0000 		lds r25,USB_ControlRequest+2
 429 018e 9230      		cpi r25,lo8(2)
 430 0190 00F4      		brsh .L27
 431               	.LBB186:
 432               	.LBB187:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 433               		.loc 2 442 0
 434 0192 8091 E800 		lds r24,232
 435 0196 877F      		andi r24,lo8(-9)
 436 0198 8093 E800 		sts 232,r24
 437               	.LBE187:
 438               	.LBE186:
 192:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 439               		.loc 1 192 0
 440 019c 9093 0000 		sts USB_ConfigurationNumber,r25
 194:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 441               		.loc 1 194 0
 442 01a0 0E94 0000 		call Endpoint_ClearStatusStage
 443               	.LVL34:
 196:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 444               		.loc 1 196 0
 445 01a4 8091 0000 		lds r24,USB_ConfigurationNumber
 446 01a8 8823      		tst r24
 447 01aa 01F0      		breq .L29
 448 01ac 84E0      		ldi r24,lo8(4)
 449 01ae 00C0      		rjmp .L25
 450               	.L29:
 451 01b0 83E0      		ldi r24,lo8(3)
 452               	.L25:
 453 01b2 8EBB      		out 0x1e,r24
 198:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 454               		.loc 1 198 0
 455 01b4 0E94 0000 		call EVENT_USB_Device_ConfigurationChanged
 456               	.LVL35:
 457               	.L27:
 458               	.LBE185:
 459               	.LBE184:
 460               	.LBB188:
 461               	.LBB189:
 429:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 462               		.loc 2 429 0
 463 01b8 8091 E800 		lds r24,232
 464               	.LBE189:
 465               	.LBE188:
 118:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 466               		.loc 1 118 0
 467 01bc 83FF      		sbrs r24,3
 468 01be 00C0      		rjmp .L1
 469               	.LBB190:
 470               	.LBB191:
 489:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 471               		.loc 2 489 0
 472 01c0 8091 EB00 		lds r24,235
 473 01c4 8062      		ori r24,lo8(32)
 474 01c6 8093 EB00 		sts 235,r24
 475               	.LBE191:
 476               	.LBE190:
 477               	.LBB192:
 478               	.LBB193:
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 479               		.loc 2 442 0
 480 01ca 8091 E800 		lds r24,232
 481 01ce 877F      		andi r24,lo8(-9)
 482 01d0 8093 E800 		sts 232,r24
 483 01d4 00C0      		rjmp .L1
 484               	.LVL36:
 485               	.L4:
 486               	.LBE193:
 487               	.LBE192:
 116:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** 	  EVENT_USB_Device_UnhandledControlRequest();
 488               		.loc 1 116 0
 489 01d6 0E94 0000 		call EVENT_USB_Device_UnhandledControlRequest
 490               	.LVL37:
 491 01da 00C0      		rjmp .L27
 492               	.L1:
 493               	/* epilogue start */
 123:../../LUFA/Drivers/USB/HighLevel/DeviceStandardReq.c **** }
 494               		.loc 1 123 0
 495 01dc 0F90      		pop __tmp_reg__
 496 01de 0F90      		pop __tmp_reg__
 497 01e0 DF91      		pop r29
 498 01e2 CF91      		pop r28
 499 01e4 1F91      		pop r17
 500 01e6 0895      		ret
 501               		.cfi_endproc
 502               	.LFE64:
 504               		.comm	USB_CurrentlySelfPowered,1,1
 505               		.comm	USB_ConfigurationNumber,1,1
 506               		.text
 507               	.Letext0:
 508               		.file 4 "/usr/lib/avr/include/stdint.h"
 509               		.file 5 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 510               		.file 6 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/USBTask.h"
 511               		.file 7 "../../LUFA/Drivers/USB/HighLevel/Events.h"
DEFINED SYMBOLS
                            *ABS*:00000000 DeviceStandardReq.c
     /tmp/ccCVEh5M.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccCVEh5M.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccCVEh5M.s:4      *ABS*:0000003f __SREG__
     /tmp/ccCVEh5M.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccCVEh5M.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccCVEh5M.s:13     .text.USB_Device_ProcessControlRequest:00000000 USB_Device_ProcessControlRequest
                            *COM*:00000001 USB_CurrentlySelfPowered
                            *COM*:00000001 USB_ConfigurationNumber

UNDEFINED SYMBOLS
USB_ControlRequest
__tablejump2__
Endpoint_ClearStatusStage
CALLBACK_USB_GetDescriptor
Endpoint_Write_Control_PStream_LE
EVENT_USB_Device_ConfigurationChanged
EVENT_USB_Device_UnhandledControlRequest
__do_clear_bss
