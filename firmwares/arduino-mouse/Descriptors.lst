   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  41:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  42:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  43:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  44:Descriptors.c ****  *  more details on HID report descriptors.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)             */
  49:Descriptors.c **** 	0x09, 0x02,          /* Usage (Mouse)                            */
  50:Descriptors.c **** 	0xA1, 0x01,          /* Collection (Application)                 */
  51:Descriptors.c **** 	0x09, 0x01,          /*   Usage (Pointer)                        */
  52:Descriptors.c **** 	0xA1, 0x00,          /*   Collection (Application)               */
  53:Descriptors.c **** 	0x95, 0x03,          /*     Report Count (3)                     */
  54:Descriptors.c **** 	0x75, 0x01,          /*     Report Size (1)                      */
  55:Descriptors.c **** 	0x05, 0x09,          /*     Usage Page (Button)                  */
  56:Descriptors.c **** 	0x19, 0x01,          /*     Usage Minimum (Button 1)             */
  57:Descriptors.c **** 	0x29, 0x03,          /*     Usage Maximum (Button 3)             */
  58:Descriptors.c **** 	0x15, 0x00,          /*     Logical Minimum (0)                  */
  59:Descriptors.c **** 	0x25, 0x01,          /*     Logical Maximum (1)                  */
  60:Descriptors.c **** 	0x81, 0x02,          /*     Input (Data, Variable, Absolute)     */
  61:Descriptors.c **** 	0x95, 0x01,          /*     Report Count (1)                     */
  62:Descriptors.c **** 	0x75, 0x05,          /*     Report Size (5)                      */
  63:Descriptors.c **** 	0x81, 0x01,          /*     Input (Constant)                     */
  64:Descriptors.c **** 	0x75, 0x08,          /*     Report Size (8)                      */
  65:Descriptors.c **** 	0x95, 0x02,          /*     Report Count (2)                     */
  66:Descriptors.c **** 	0x05, 0x01,          /*     Usage Page (Generic Desktop Control) */
  67:Descriptors.c **** 	0x09, 0x30,          /*     Usage X                              */
  68:Descriptors.c **** 	0x09, 0x31,          /*     Usage Y                              */
  69:Descriptors.c **** 	0x15, 0x81,          /*     Logical Minimum (-127)               */
  70:Descriptors.c **** 	0x25, 0x7F,          /*     Logical Maximum (127)                */
  71:Descriptors.c **** 	0x81, 0x06,          /*     Input (Data, Variable, Relative)     */
  72:Descriptors.c **** 	0xC0,                /*   End Collection                         */
  73:Descriptors.c **** 	0xC0                 /* End Collection                           */
  74:Descriptors.c **** };
  75:Descriptors.c **** 
  76:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  77:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  78:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  79:Descriptors.c ****  *  process begins.
  80:Descriptors.c ****  */
  81:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  82:Descriptors.c **** {
  83:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  84:Descriptors.c **** 		
  85:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  86:Descriptors.c **** 	.Class                  = 0x00,
  87:Descriptors.c **** 	.SubClass               = 0x00,
  88:Descriptors.c **** 	.Protocol               = 0x00,
  89:Descriptors.c **** 				
  90:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  91:Descriptors.c **** 		
  92:Descriptors.c **** 	.VendorID               = 0x03EB,
  93:Descriptors.c **** 	.ProductID              = 0x2041,
  94:Descriptors.c **** 	.ReleaseNumber          = 0x0000,
  95:Descriptors.c **** 		
  96:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  97:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  98:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  99:Descriptors.c **** 		
 100:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 101:Descriptors.c **** };
 102:Descriptors.c **** 
 103:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 104:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 105:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 106:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 107:Descriptors.c ****  */
 108:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 109:Descriptors.c **** {
 110:Descriptors.c **** 	.Config = 
 111:Descriptors.c **** 		{
 112:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 113:Descriptors.c **** 
 114:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 115:Descriptors.c **** 			.TotalInterfaces        = 1,
 116:Descriptors.c **** 				
 117:Descriptors.c **** 			.ConfigurationNumber    = 1,
 118:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 119:Descriptors.c **** 				
 120:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 121:Descriptors.c **** 			
 122:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(200)
 123:Descriptors.c **** 		},
 124:Descriptors.c **** 		
 125:Descriptors.c **** 	.HID_Interface = 
 126:Descriptors.c **** 		{
 127:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 128:Descriptors.c **** 
 129:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 130:Descriptors.c **** 			.AlternateSetting       = 0x00,
 131:Descriptors.c **** 			
 132:Descriptors.c **** 			.TotalEndpoints         = 1,
 133:Descriptors.c **** 				
 134:Descriptors.c **** 			.Class                  = 0x03,
 135:Descriptors.c **** 			.SubClass               = 0x01,
 136:Descriptors.c **** 			.Protocol               = HID_BOOT_MOUSE_PROTOCOL,
 137:Descriptors.c **** 				
 138:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 139:Descriptors.c **** 		},
 140:Descriptors.c **** 
 141:Descriptors.c **** 	.HID_MouseHID = 
 142:Descriptors.c **** 		{
 143:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
 144:Descriptors.c **** 
 145:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 146:Descriptors.c **** 			.CountryCode            = 0x00,
 147:Descriptors.c **** 			.TotalReportDescriptors = 1,
 148:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 149:Descriptors.c **** 			.HIDReportLength        = sizeof(MouseReport)
 150:Descriptors.c **** 		},
 151:Descriptors.c **** 
 152:Descriptors.c **** 	.HID_ReportINEndpoint = 
 153:Descriptors.c **** 		{
 154:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 155:Descriptors.c **** 
 156:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | MOUSE_EPNUM),
 157:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 158:Descriptors.c **** 			.EndpointSize           = MOUSE_EPSIZE,
 159:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 160:Descriptors.c **** 		}
 161:Descriptors.c **** };
 162:Descriptors.c **** 
 163:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 164:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 165:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 166:Descriptors.c ****  */
 167:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 168:Descriptors.c **** {
 169:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 170:Descriptors.c **** 		
 171:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 172:Descriptors.c **** };
 173:Descriptors.c **** 
 174:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 175:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 176:Descriptors.c ****  *  Descriptor.
 177:Descriptors.c ****  */
 178:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 179:Descriptors.c **** {
 180:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(7), .Type = DTYPE_String},
 181:Descriptors.c **** 		
 182:Descriptors.c **** 	.UnicodeString          = L"Arduino"
 183:Descriptors.c **** };
 184:Descriptors.c **** 
 185:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 186:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 187:Descriptors.c ****  *  Descriptor.
 188:Descriptors.c ****  */
 189:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 190:Descriptors.c **** {
 191:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(9), .Type = DTYPE_String},
 192:Descriptors.c **** 		
 193:Descriptors.c **** 	.UnicodeString          = L"Mouse 0.1"
 194:Descriptors.c **** };
 195:Descriptors.c **** 
 196:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 197:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 198:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 199:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 200:Descriptors.c ****  *  USB host.
 201:Descriptors.c ****  */
 202:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 203:Descriptors.c ****                                     const uint8_t wIndex,
 204:Descriptors.c ****                                     void** const DescriptorAddress)
 205:Descriptors.c **** {
  16               		.loc 1 205 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 206:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 206 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 207:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 208:Descriptors.c **** 
 209:Descriptors.c **** 	void*    Address = NULL;
 210:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 211:Descriptors.c **** 
 212:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 212 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L12
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F4      		brne .L14
  37               	.LVL1:
 213:Descriptors.c **** 	{
 214:Descriptors.c **** 		case DTYPE_Device:
 215:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 216:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 217:Descriptors.c **** 			break;
 218:Descriptors.c **** 		case DTYPE_Configuration:
 219:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 220:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 220 0
  39 0018 82E2      		ldi r24,lo8(34)
  40 001a 90E0      		ldi r25,0
  41               	.LVL2:
 219:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
  42               		.loc 1 219 0
  43 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 221:Descriptors.c **** 			break;
  45               		.loc 1 221 0
  46 0020 00C0      		rjmp .L5
  47               	.LVL3:
  48               	.L4:
 212:Descriptors.c **** 	switch (DescriptorType)
  49               		.loc 1 212 0
  50 0022 2132      		cpi r18,33
  51 0024 3105      		cpc r19,__zero_reg__
  52 0026 01F0      		breq .L7
  53 0028 2232      		cpi r18,34
  54 002a 3105      		cpc r19,__zero_reg__
  55 002c 01F4      		brne .L14
  56               	.LVL4:
 222:Descriptors.c **** 		case DTYPE_String:
 223:Descriptors.c **** 			switch (DescriptorNumber)
 224:Descriptors.c **** 			{
 225:Descriptors.c **** 				case 0x00:
 226:Descriptors.c **** 					Address = (void*)&LanguageString;
 227:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 228:Descriptors.c **** 					break;
 229:Descriptors.c **** 				case 0x01:
 230:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 231:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 232:Descriptors.c **** 					break;
 233:Descriptors.c **** 				case 0x02:
 234:Descriptors.c **** 					Address = (void*)&ProductString;
 235:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 236:Descriptors.c **** 					break;
 237:Descriptors.c **** 			}
 238:Descriptors.c **** 			
 239:Descriptors.c **** 			break;
 240:Descriptors.c **** 		case DTYPE_HID: 
 241:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
 242:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 243:Descriptors.c **** 			break;
 244:Descriptors.c **** 		case DTYPE_Report: 
 245:Descriptors.c **** 			Address = (void*)&MouseReport;
 246:Descriptors.c **** 			Size    = sizeof(MouseReport);
  57               		.loc 1 246 0
  58 002e 82E3      		ldi r24,lo8(50)
  59 0030 90E0      		ldi r25,0
  60               	.LVL5:
 245:Descriptors.c **** 			Address = (void*)&MouseReport;
  61               		.loc 1 245 0
  62 0032 20E0      		ldi r18,lo8(MouseReport)
  63 0034 30E0      		ldi r19,hi8(MouseReport)
 247:Descriptors.c **** 			break;
  64               		.loc 1 247 0
  65 0036 00C0      		rjmp .L5
  66               	.LVL6:
  67               	.L3:
  68 0038 9927      		clr r25
  69               	.LVL7:
 223:Descriptors.c **** 			switch (DescriptorNumber)
  70               		.loc 1 223 0
  71 003a 8130      		cpi r24,1
  72 003c 9105      		cpc r25,__zero_reg__
  73 003e 01F0      		breq .L9
  74 0040 8230      		cpi r24,2
  75 0042 9105      		cpc r25,__zero_reg__
  76 0044 01F0      		breq .L10
  77 0046 892B      		or r24,r25
  78 0048 01F4      		brne .L14
  79               	.LVL8:
  80               	.LBB2:
 227:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  81               		.loc 1 227 0
  82 004a E0E0      		ldi r30,lo8(LanguageString)
  83 004c F0E0      		ldi r31,hi8(LanguageString)
  84 004e 00C0      		rjmp .L15
  85               	.LVL9:
  86               	.L9:
  87               	.LBE2:
  88               	.LBB3:
 231:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  89               		.loc 1 231 0
  90 0050 E0E0      		ldi r30,lo8(ManufacturerString)
  91 0052 F0E0      		ldi r31,hi8(ManufacturerString)
  92 0054 00C0      		rjmp .L15
  93               	.LVL10:
  94               	.L10:
  95               	.LBE3:
  96               	.LBB4:
 235:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  97               		.loc 1 235 0
  98 0056 E0E0      		ldi r30,lo8(ProductString)
  99 0058 F0E0      		ldi r31,hi8(ProductString)
 100               	.LVL11:
 101               	.L15:
 102               	/* #APP */
 103               	 ;  235 "Descriptors.c" 1
 104 005a 8491      		lpm r24, Z
 105               		
 106               	 ;  0 "" 2
 107               	.LVL12:
 108               	/* #NOAPP */
 109               	.LBE4:
 110 005c 90E0      		ldi r25,0
 111               	.LVL13:
 234:Descriptors.c **** 					Address = (void*)&ProductString;
 112               		.loc 1 234 0
 113 005e 9F01      		movw r18,r30
 236:Descriptors.c **** 					break;
 114               		.loc 1 236 0
 115 0060 00C0      		rjmp .L5
 116               	.LVL14:
 117               	.L7:
 242:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 118               		.loc 1 242 0
 119 0062 89E0      		ldi r24,lo8(9)
 120 0064 90E0      		ldi r25,0
 121               	.LVL15:
 241:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
 122               		.loc 1 241 0
 123 0066 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 124 0068 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 125               	.LVL16:
 243:Descriptors.c **** 			break;
 126               		.loc 1 243 0
 127 006a 00C0      		rjmp .L5
 128               	.LVL17:
 129               	.L12:
 216:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 130               		.loc 1 216 0
 131 006c 82E1      		ldi r24,lo8(18)
 132 006e 90E0      		ldi r25,0
 133               	.LVL18:
 215:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 134               		.loc 1 215 0
 135 0070 20E0      		ldi r18,lo8(DeviceDescriptor)
 136 0072 30E0      		ldi r19,hi8(DeviceDescriptor)
 137 0074 00C0      		rjmp .L5
 138               	.L14:
 210:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 139               		.loc 1 210 0
 140 0076 80E0      		ldi r24,0
 141 0078 90E0      		ldi r25,0
 209:Descriptors.c **** 	void*    Address = NULL;
 142               		.loc 1 209 0
 143 007a 20E0      		ldi r18,0
 144 007c 30E0      		ldi r19,0
 145               	.LVL19:
 146               	.L5:
 248:Descriptors.c **** 	}
 249:Descriptors.c **** 	
 250:Descriptors.c **** 	*DescriptorAddress = Address;		
 147               		.loc 1 250 0
 148 007e FA01      		movw r30,r20
 149 0080 3183      		std Z+1,r19
 150 0082 2083      		st Z,r18
 251:Descriptors.c **** 	return Size;
 252:Descriptors.c **** }
 151               		.loc 1 252 0
 152 0084 0895      		ret
 153               		.cfi_endproc
 154               	.LFE66:
 156               	.global	ProductString
 157               		.section	.progmem.data,"a",@progbits
 160               	ProductString:
 161 0000 14        		.byte	20
 162 0001 03        		.byte	3
 163 0002 4D00      		.string	"M"
 164 0004 6F00      		.string	"o"
 165 0006 7500      		.string	"u"
 166 0008 7300      		.string	"s"
 167 000a 6500      		.string	"e"
 168 000c 2000      		.string	" "
 169 000e 3000      		.string	"0"
 170 0010 2E00      		.string	"."
 171 0012 3100      		.string	"1"
 172 0014 00        		.string	""
 173 0015 00        		.string	""
 174               	.global	ManufacturerString
 177               	ManufacturerString:
 178 0016 10        		.byte	16
 179 0017 03        		.byte	3
 180 0018 4100      		.string	"A"
 181 001a 7200      		.string	"r"
 182 001c 6400      		.string	"d"
 183 001e 7500      		.string	"u"
 184 0020 6900      		.string	"i"
 185 0022 6E00      		.string	"n"
 186 0024 6F00      		.string	"o"
 187 0026 00        		.string	""
 188 0027 00        		.string	""
 189               	.global	LanguageString
 192               	LanguageString:
 193 0028 04        		.byte	4
 194 0029 03        		.byte	3
 195 002a 0904      		.word	1033
 196               	.global	ConfigurationDescriptor
 199               	ConfigurationDescriptor:
 200 002c 09        		.byte	9
 201 002d 02        		.byte	2
 202 002e 2200      		.word	34
 203 0030 01        		.byte	1
 204 0031 01        		.byte	1
 205 0032 00        		.byte	0
 206 0033 C0        		.byte	-64
 207 0034 64        		.byte	100
 208 0035 09        		.byte	9
 209 0036 04        		.byte	4
 210 0037 00        		.byte	0
 211 0038 00        		.byte	0
 212 0039 01        		.byte	1
 213 003a 03        		.byte	3
 214 003b 01        		.byte	1
 215 003c 02        		.byte	2
 216 003d 00        		.byte	0
 217 003e 09        		.byte	9
 218 003f 21        		.byte	33
 219 0040 1101      		.word	273
 220 0042 00        		.byte	0
 221 0043 01        		.byte	1
 222 0044 22        		.byte	34
 223 0045 3200      		.word	50
 224 0047 07        		.byte	7
 225 0048 05        		.byte	5
 226 0049 81        		.byte	-127
 227 004a 03        		.byte	3
 228 004b 0800      		.word	8
 229 004d 0A        		.byte	10
 230               	.global	DeviceDescriptor
 233               	DeviceDescriptor:
 234 004e 12        		.byte	18
 235 004f 01        		.byte	1
 236 0050 1001      		.word	272
 237 0052 00        		.byte	0
 238 0053 00        		.byte	0
 239 0054 00        		.byte	0
 240 0055 08        		.byte	8
 241 0056 EB03      		.word	1003
 242 0058 4120      		.word	8257
 243 005a 0000      		.word	0
 244 005c 01        		.byte	1
 245 005d 02        		.byte	2
 246 005e 00        		.byte	0
 247 005f 01        		.byte	1
 248               	.global	MouseReport
 251               	MouseReport:
 252 0060 05        		.byte	5
 253 0061 01        		.byte	1
 254 0062 09        		.byte	9
 255 0063 02        		.byte	2
 256 0064 A1        		.byte	-95
 257 0065 01        		.byte	1
 258 0066 09        		.byte	9
 259 0067 01        		.byte	1
 260 0068 A1        		.byte	-95
 261 0069 00        		.byte	0
 262 006a 95        		.byte	-107
 263 006b 03        		.byte	3
 264 006c 75        		.byte	117
 265 006d 01        		.byte	1
 266 006e 05        		.byte	5
 267 006f 09        		.byte	9
 268 0070 19        		.byte	25
 269 0071 01        		.byte	1
 270 0072 29        		.byte	41
 271 0073 03        		.byte	3
 272 0074 15        		.byte	21
 273 0075 00        		.byte	0
 274 0076 25        		.byte	37
 275 0077 01        		.byte	1
 276 0078 81        		.byte	-127
 277 0079 02        		.byte	2
 278 007a 95        		.byte	-107
 279 007b 01        		.byte	1
 280 007c 75        		.byte	117
 281 007d 05        		.byte	5
 282 007e 81        		.byte	-127
 283 007f 01        		.byte	1
 284 0080 75        		.byte	117
 285 0081 08        		.byte	8
 286 0082 95        		.byte	-107
 287 0083 02        		.byte	2
 288 0084 05        		.byte	5
 289 0085 01        		.byte	1
 290 0086 09        		.byte	9
 291 0087 30        		.byte	48
 292 0088 09        		.byte	9
 293 0089 31        		.byte	49
 294 008a 15        		.byte	21
 295 008b 81        		.byte	-127
 296 008c 25        		.byte	37
 297 008d 7F        		.byte	127
 298 008e 81        		.byte	-127
 299 008f 06        		.byte	6
 300 0090 C0        		.byte	-64
 301 0091 C0        		.byte	-64
 302               		.text
 303               	.Letext0:
 304               		.file 2 "/usr/lib/avr/include/stdint.h"
 305               		.file 3 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 306               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 307               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 308               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
     /tmp/ccVDbifS.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccVDbifS.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccVDbifS.s:4      *ABS*:0000003f __SREG__
     /tmp/ccVDbifS.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccVDbifS.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccVDbifS.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
     /tmp/ccVDbifS.s:199    .progmem.data:0000002c ConfigurationDescriptor
     /tmp/ccVDbifS.s:251    .progmem.data:00000060 MouseReport
     /tmp/ccVDbifS.s:192    .progmem.data:00000028 LanguageString
     /tmp/ccVDbifS.s:177    .progmem.data:00000016 ManufacturerString
     /tmp/ccVDbifS.s:160    .progmem.data:00000000 ProductString
     /tmp/ccVDbifS.s:233    .progmem.data:0000004e DeviceDescriptor

NO UNDEFINED SYMBOLS
