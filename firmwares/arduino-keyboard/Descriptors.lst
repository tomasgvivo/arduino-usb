   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 	  
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  41:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  42:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  43:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  44:Descriptors.c ****  *  more details on HID report descriptors.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)                    */
  49:Descriptors.c **** 	0x09, 0x06,          /* Usage (Keyboard)                                */
  50:Descriptors.c **** 	0xa1, 0x01,          /* Collection (Application)                        */
  51:Descriptors.c **** 	0x75, 0x01,          /*   Report Size (1)                               */
  52:Descriptors.c **** 	0x95, 0x08,          /*   Report Count (8)                              */
  53:Descriptors.c **** 	0x05, 0x07,          /*   Usage Page (Key Codes)                        */
  54:Descriptors.c **** 	0x19, 0xe0,          /*   Usage Minimum (Keyboard LeftControl)          */
  55:Descriptors.c **** 	0x29, 0xe7,          /*   Usage Maximum (Keyboard Right GUI)            */
  56:Descriptors.c **** 	0x15, 0x00,          /*   Logical Minimum (0)                           */
  57:Descriptors.c **** 	0x25, 0x01,          /*   Logical Maximum (1)                           */
  58:Descriptors.c **** 	0x81, 0x02,          /*   Input (Data, Variable, Absolute)              */
  59:Descriptors.c **** 	0x95, 0x01,          /*   Report Count (1)                              */
  60:Descriptors.c **** 	0x75, 0x08,          /*   Report Size (8)                               */
  61:Descriptors.c **** 	0x81, 0x03,          /*   Input (Const, Variable, Absolute)             */
  62:Descriptors.c **** 	0x95, 0x05,          /*   Report Count (5)                              */
  63:Descriptors.c **** 	0x75, 0x01,          /*   Report Size (1)                               */
  64:Descriptors.c **** 	0x05, 0x08,          /*   Usage Page (LEDs)                             */
  65:Descriptors.c **** 	0x19, 0x01,          /*   Usage Minimum (Num Lock)                      */
  66:Descriptors.c **** 	0x29, 0x05,          /*   Usage Maximum (Kana)                          */
  67:Descriptors.c **** 	0x91, 0x02,          /*   Output (Data, Variable, Absolute)             */
  68:Descriptors.c **** 	0x95, 0x01,          /*   Report Count (1)                              */
  69:Descriptors.c **** 	0x75, 0x03,          /*   Report Size (3)                               */
  70:Descriptors.c **** 	0x91, 0x03,          /*   Output (Const, Variable, Absolute)            */
  71:Descriptors.c **** 	0x95, 0x06,          /*   Report Count (6)                              */
  72:Descriptors.c **** 	0x75, 0x08,          /*   Report Size (8)                               */
  73:Descriptors.c **** 	0x15, 0x00,          /*   Logical Minimum (0)                           */
  74:Descriptors.c **** 	0x26, 231, 0,        /*   Logical Maximum (231)                         */
  75:Descriptors.c **** 	0x05, 0x07,          /*   Usage Page (Keyboard)                         */
  76:Descriptors.c **** 	0x19, 0x00,          /*   Usage Minimum (Reserved (no event indicated)) */
  77:Descriptors.c **** 	0x29, 231,           /*   Usage Maximum (Keyboard Application)          */
  78:Descriptors.c **** 	0x81, 0x00,          /*   Input (Data, Array, Absolute)                 */
  79:Descriptors.c **** 	0xc0                 /* End Collection                                  */
  80:Descriptors.c **** };
  81:Descriptors.c **** 
  82:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  83:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  84:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  85:Descriptors.c ****  *  process begins.
  86:Descriptors.c ****  */
  87:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  88:Descriptors.c **** {
  89:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  90:Descriptors.c **** 		
  91:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  92:Descriptors.c **** 	.Class                  = 0x00,
  93:Descriptors.c **** 	.SubClass               = 0x00,
  94:Descriptors.c **** 	.Protocol               = 0x00,
  95:Descriptors.c **** 				
  96:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  97:Descriptors.c **** 		
  98:Descriptors.c **** 	.VendorID               = 0x03EB,
  99:Descriptors.c **** 	.ProductID              = 0x2042,
 100:Descriptors.c **** 	.ReleaseNumber          = 0x0000,
 101:Descriptors.c **** 		
 102:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
 103:Descriptors.c **** 	.ProductStrIndex        = 0x02,
 104:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
 105:Descriptors.c **** 		
 106:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 107:Descriptors.c **** };
 108:Descriptors.c **** 
 109:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 110:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 111:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 112:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 113:Descriptors.c ****  */
 114:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 115:Descriptors.c **** {
 116:Descriptors.c **** 	.Config = 
 117:Descriptors.c **** 		{
 118:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 119:Descriptors.c **** 
 120:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 121:Descriptors.c **** 			.TotalInterfaces        = 1,
 122:Descriptors.c **** 				
 123:Descriptors.c **** 			.ConfigurationNumber    = 1,
 124:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 125:Descriptors.c **** 				
 126:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 127:Descriptors.c **** 			
 128:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 129:Descriptors.c **** 		},
 130:Descriptors.c **** 		
 131:Descriptors.c **** 	.HID_Interface = 
 132:Descriptors.c **** 		{
 133:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 134:Descriptors.c **** 
 135:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 136:Descriptors.c **** 			.AlternateSetting       = 0x00,
 137:Descriptors.c **** 			
 138:Descriptors.c **** 			.TotalEndpoints         = 1,
 139:Descriptors.c **** 				
 140:Descriptors.c **** 			.Class                  = 0x03,
 141:Descriptors.c **** 			.SubClass               = 0x01,
 142:Descriptors.c **** 			.Protocol               = HID_BOOT_KEYBOARD_PROTOCOL,
 143:Descriptors.c **** 				
 144:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 145:Descriptors.c **** 		},
 146:Descriptors.c **** 
 147:Descriptors.c **** 	.HID_KeyboardHID = 
 148:Descriptors.c **** 		{  
 149:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
 150:Descriptors.c **** 			
 151:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 152:Descriptors.c **** 			.CountryCode            = 0x00,
 153:Descriptors.c **** 			.TotalReportDescriptors = 1,
 154:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 155:Descriptors.c **** 			.HIDReportLength        = sizeof(KeyboardReport)
 156:Descriptors.c **** 		},
 157:Descriptors.c **** 		
 158:Descriptors.c **** 	.HID_ReportINEndpoint = 
 159:Descriptors.c **** 		{
 160:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 161:Descriptors.c **** 
 162:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | KEYBOARD_EPNUM),
 163:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 164:Descriptors.c **** 			.EndpointSize           = KEYBOARD_EPSIZE,
 165:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 166:Descriptors.c **** 		},
 167:Descriptors.c **** };
 168:Descriptors.c **** 
 169:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 170:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 171:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 172:Descriptors.c ****  */
 173:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 174:Descriptors.c **** {
 175:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 176:Descriptors.c **** 		
 177:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 178:Descriptors.c **** };
 179:Descriptors.c **** 
 180:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 181:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 182:Descriptors.c ****  *  Descriptor.
 183:Descriptors.c ****  */
 184:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 185:Descriptors.c **** {
 186:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(7), .Type = DTYPE_String},
 187:Descriptors.c **** 		
 188:Descriptors.c **** 	.UnicodeString          = L"Arduino"
 189:Descriptors.c **** };
 190:Descriptors.c **** 
 191:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 192:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 193:Descriptors.c ****  *  Descriptor.
 194:Descriptors.c ****  */
 195:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 196:Descriptors.c **** {
 197:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(8), .Type = DTYPE_String},
 198:Descriptors.c **** 		
 199:Descriptors.c **** 	.UnicodeString          = L"Keyboard"
 200:Descriptors.c **** };
 201:Descriptors.c **** 
 202:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 203:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 204:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 205:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 206:Descriptors.c ****  *  USB host.
 207:Descriptors.c ****  */
 208:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const Descr
 209:Descriptors.c **** {
  16               		.loc 1 209 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 210:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 210 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 211:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 212:Descriptors.c **** 
 213:Descriptors.c **** 	void*    Address = NULL;
 214:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 215:Descriptors.c **** 
 216:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 216 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L12
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F4      		brne .L14
  37               	.LVL1:
 217:Descriptors.c **** 	{
 218:Descriptors.c **** 		case DTYPE_Device: 
 219:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 220:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 221:Descriptors.c **** 			break;
 222:Descriptors.c **** 		case DTYPE_Configuration: 
 223:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 224:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 224 0
  39 0018 82E2      		ldi r24,lo8(34)
  40 001a 90E0      		ldi r25,0
  41               	.LVL2:
 223:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
  42               		.loc 1 223 0
  43 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 225:Descriptors.c **** 			break;
  45               		.loc 1 225 0
  46 0020 00C0      		rjmp .L5
  47               	.LVL3:
  48               	.L4:
 216:Descriptors.c **** 	switch (DescriptorType)
  49               		.loc 1 216 0
  50 0022 2132      		cpi r18,33
  51 0024 3105      		cpc r19,__zero_reg__
  52 0026 01F0      		breq .L7
  53 0028 2232      		cpi r18,34
  54 002a 3105      		cpc r19,__zero_reg__
  55 002c 01F4      		brne .L14
  56               	.LVL4:
 226:Descriptors.c **** 		case DTYPE_String: 
 227:Descriptors.c **** 			switch (DescriptorNumber)
 228:Descriptors.c **** 			{
 229:Descriptors.c **** 				case 0x00: 
 230:Descriptors.c **** 					Address = (void*)&LanguageString;
 231:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 232:Descriptors.c **** 					break;
 233:Descriptors.c **** 				case 0x01: 
 234:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 235:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 236:Descriptors.c **** 					break;
 237:Descriptors.c **** 				case 0x02: 
 238:Descriptors.c **** 					Address = (void*)&ProductString;
 239:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 240:Descriptors.c **** 					break;
 241:Descriptors.c **** 			}
 242:Descriptors.c **** 			
 243:Descriptors.c **** 			break;
 244:Descriptors.c **** 		case DTYPE_HID: 
 245:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
 246:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 247:Descriptors.c **** 			break;
 248:Descriptors.c **** 		case DTYPE_Report: 
 249:Descriptors.c **** 			Address = (void*)&KeyboardReport;
 250:Descriptors.c **** 			Size    = sizeof(KeyboardReport);
  57               		.loc 1 250 0
  58 002e 80E4      		ldi r24,lo8(64)
  59 0030 90E0      		ldi r25,0
  60               	.LVL5:
 249:Descriptors.c **** 			Address = (void*)&KeyboardReport;
  61               		.loc 1 249 0
  62 0032 20E0      		ldi r18,lo8(KeyboardReport)
  63 0034 30E0      		ldi r19,hi8(KeyboardReport)
 251:Descriptors.c **** 			break;
  64               		.loc 1 251 0
  65 0036 00C0      		rjmp .L5
  66               	.LVL6:
  67               	.L3:
  68 0038 9927      		clr r25
  69               	.LVL7:
 227:Descriptors.c **** 			switch (DescriptorNumber)
  70               		.loc 1 227 0
  71 003a 8130      		cpi r24,1
  72 003c 9105      		cpc r25,__zero_reg__
  73 003e 01F0      		breq .L9
  74 0040 8230      		cpi r24,2
  75 0042 9105      		cpc r25,__zero_reg__
  76 0044 01F0      		breq .L10
  77 0046 892B      		or r24,r25
  78 0048 01F4      		brne .L14
  79               	.LVL8:
  80               	.LBB2:
 231:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  81               		.loc 1 231 0
  82 004a E0E0      		ldi r30,lo8(LanguageString)
  83 004c F0E0      		ldi r31,hi8(LanguageString)
  84 004e 00C0      		rjmp .L15
  85               	.LVL9:
  86               	.L9:
  87               	.LBE2:
  88               	.LBB3:
 235:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  89               		.loc 1 235 0
  90 0050 E0E0      		ldi r30,lo8(ManufacturerString)
  91 0052 F0E0      		ldi r31,hi8(ManufacturerString)
  92 0054 00C0      		rjmp .L15
  93               	.LVL10:
  94               	.L10:
  95               	.LBE3:
  96               	.LBB4:
 239:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  97               		.loc 1 239 0
  98 0056 E0E0      		ldi r30,lo8(ProductString)
  99 0058 F0E0      		ldi r31,hi8(ProductString)
 100               	.LVL11:
 101               	.L15:
 102               	/* #APP */
 103               	 ;  239 "Descriptors.c" 1
 104 005a 8491      		lpm r24, Z
 105               		
 106               	 ;  0 "" 2
 107               	.LVL12:
 108               	/* #NOAPP */
 109               	.LBE4:
 110 005c 90E0      		ldi r25,0
 111               	.LVL13:
 238:Descriptors.c **** 					Address = (void*)&ProductString;
 112               		.loc 1 238 0
 113 005e 9F01      		movw r18,r30
 240:Descriptors.c **** 					break;
 114               		.loc 1 240 0
 115 0060 00C0      		rjmp .L5
 116               	.LVL14:
 117               	.L7:
 246:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 118               		.loc 1 246 0
 119 0062 89E0      		ldi r24,lo8(9)
 120 0064 90E0      		ldi r25,0
 121               	.LVL15:
 245:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
 122               		.loc 1 245 0
 123 0066 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 124 0068 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 125               	.LVL16:
 247:Descriptors.c **** 			break;
 126               		.loc 1 247 0
 127 006a 00C0      		rjmp .L5
 128               	.LVL17:
 129               	.L12:
 220:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 130               		.loc 1 220 0
 131 006c 82E1      		ldi r24,lo8(18)
 132 006e 90E0      		ldi r25,0
 133               	.LVL18:
 219:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 134               		.loc 1 219 0
 135 0070 20E0      		ldi r18,lo8(DeviceDescriptor)
 136 0072 30E0      		ldi r19,hi8(DeviceDescriptor)
 137 0074 00C0      		rjmp .L5
 138               	.L14:
 214:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 139               		.loc 1 214 0
 140 0076 80E0      		ldi r24,0
 141 0078 90E0      		ldi r25,0
 213:Descriptors.c **** 	void*    Address = NULL;
 142               		.loc 1 213 0
 143 007a 20E0      		ldi r18,0
 144 007c 30E0      		ldi r19,0
 145               	.LVL19:
 146               	.L5:
 252:Descriptors.c **** 	}
 253:Descriptors.c **** 	
 254:Descriptors.c **** 	*DescriptorAddress = Address;
 147               		.loc 1 254 0
 148 007e FA01      		movw r30,r20
 149 0080 3183      		std Z+1,r19
 150 0082 2083      		st Z,r18
 255:Descriptors.c **** 	return Size;
 256:Descriptors.c **** }
 151               		.loc 1 256 0
 152 0084 0895      		ret
 153               		.cfi_endproc
 154               	.LFE66:
 156               	.global	ProductString
 157               		.section	.progmem.data,"a",@progbits
 160               	ProductString:
 161 0000 12        		.byte	18
 162 0001 03        		.byte	3
 163 0002 4B00      		.string	"K"
 164 0004 6500      		.string	"e"
 165 0006 7900      		.string	"y"
 166 0008 6200      		.string	"b"
 167 000a 6F00      		.string	"o"
 168 000c 6100      		.string	"a"
 169 000e 7200      		.string	"r"
 170 0010 6400      		.string	"d"
 171 0012 00        		.string	""
 172 0013 00        		.string	""
 173               	.global	ManufacturerString
 176               	ManufacturerString:
 177 0014 10        		.byte	16
 178 0015 03        		.byte	3
 179 0016 4100      		.string	"A"
 180 0018 7200      		.string	"r"
 181 001a 6400      		.string	"d"
 182 001c 7500      		.string	"u"
 183 001e 6900      		.string	"i"
 184 0020 6E00      		.string	"n"
 185 0022 6F00      		.string	"o"
 186 0024 00        		.string	""
 187 0025 00        		.string	""
 188               	.global	LanguageString
 191               	LanguageString:
 192 0026 04        		.byte	4
 193 0027 03        		.byte	3
 194 0028 0904      		.word	1033
 195               	.global	ConfigurationDescriptor
 198               	ConfigurationDescriptor:
 199 002a 09        		.byte	9
 200 002b 02        		.byte	2
 201 002c 2200      		.word	34
 202 002e 01        		.byte	1
 203 002f 01        		.byte	1
 204 0030 00        		.byte	0
 205 0031 C0        		.byte	-64
 206 0032 32        		.byte	50
 207 0033 09        		.byte	9
 208 0034 04        		.byte	4
 209 0035 00        		.byte	0
 210 0036 00        		.byte	0
 211 0037 01        		.byte	1
 212 0038 03        		.byte	3
 213 0039 01        		.byte	1
 214 003a 01        		.byte	1
 215 003b 00        		.byte	0
 216 003c 09        		.byte	9
 217 003d 21        		.byte	33
 218 003e 1101      		.word	273
 219 0040 00        		.byte	0
 220 0041 01        		.byte	1
 221 0042 22        		.byte	34
 222 0043 4000      		.word	64
 223 0045 07        		.byte	7
 224 0046 05        		.byte	5
 225 0047 81        		.byte	-127
 226 0048 03        		.byte	3
 227 0049 0800      		.word	8
 228 004b 0A        		.byte	10
 229               	.global	DeviceDescriptor
 232               	DeviceDescriptor:
 233 004c 12        		.byte	18
 234 004d 01        		.byte	1
 235 004e 1001      		.word	272
 236 0050 00        		.byte	0
 237 0051 00        		.byte	0
 238 0052 00        		.byte	0
 239 0053 08        		.byte	8
 240 0054 EB03      		.word	1003
 241 0056 4220      		.word	8258
 242 0058 0000      		.word	0
 243 005a 01        		.byte	1
 244 005b 02        		.byte	2
 245 005c 00        		.byte	0
 246 005d 01        		.byte	1
 247               	.global	KeyboardReport
 250               	KeyboardReport:
 251 005e 05        		.byte	5
 252 005f 01        		.byte	1
 253 0060 09        		.byte	9
 254 0061 06        		.byte	6
 255 0062 A1        		.byte	-95
 256 0063 01        		.byte	1
 257 0064 75        		.byte	117
 258 0065 01        		.byte	1
 259 0066 95        		.byte	-107
 260 0067 08        		.byte	8
 261 0068 05        		.byte	5
 262 0069 07        		.byte	7
 263 006a 19        		.byte	25
 264 006b E0        		.byte	-32
 265 006c 29        		.byte	41
 266 006d E7        		.byte	-25
 267 006e 15        		.byte	21
 268 006f 00        		.byte	0
 269 0070 25        		.byte	37
 270 0071 01        		.byte	1
 271 0072 81        		.byte	-127
 272 0073 02        		.byte	2
 273 0074 95        		.byte	-107
 274 0075 01        		.byte	1
 275 0076 75        		.byte	117
 276 0077 08        		.byte	8
 277 0078 81        		.byte	-127
 278 0079 03        		.byte	3
 279 007a 95        		.byte	-107
 280 007b 05        		.byte	5
 281 007c 75        		.byte	117
 282 007d 01        		.byte	1
 283 007e 05        		.byte	5
 284 007f 08        		.byte	8
 285 0080 19        		.byte	25
 286 0081 01        		.byte	1
 287 0082 29        		.byte	41
 288 0083 05        		.byte	5
 289 0084 91        		.byte	-111
 290 0085 02        		.byte	2
 291 0086 95        		.byte	-107
 292 0087 01        		.byte	1
 293 0088 75        		.byte	117
 294 0089 03        		.byte	3
 295 008a 91        		.byte	-111
 296 008b 03        		.byte	3
 297 008c 95        		.byte	-107
 298 008d 06        		.byte	6
 299 008e 75        		.byte	117
 300 008f 08        		.byte	8
 301 0090 15        		.byte	21
 302 0091 00        		.byte	0
 303 0092 26        		.byte	38
 304 0093 E7        		.byte	-25
 305 0094 00        		.byte	0
 306 0095 05        		.byte	5
 307 0096 07        		.byte	7
 308 0097 19        		.byte	25
 309 0098 00        		.byte	0
 310 0099 29        		.byte	41
 311 009a E7        		.byte	-25
 312 009b 81        		.byte	-127
 313 009c 00        		.byte	0
 314 009d C0        		.byte	-64
 315               		.text
 316               	.Letext0:
 317               		.file 2 "/usr/lib/avr/include/stdint.h"
 318               		.file 3 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 319               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 320               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 321               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
     /tmp/cceXYrTA.s:2      *ABS*:0000003e __SP_H__
     /tmp/cceXYrTA.s:3      *ABS*:0000003d __SP_L__
     /tmp/cceXYrTA.s:4      *ABS*:0000003f __SREG__
     /tmp/cceXYrTA.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cceXYrTA.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cceXYrTA.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
     /tmp/cceXYrTA.s:198    .progmem.data:0000002a ConfigurationDescriptor
     /tmp/cceXYrTA.s:250    .progmem.data:0000005e KeyboardReport
     /tmp/cceXYrTA.s:191    .progmem.data:00000026 LanguageString
     /tmp/cceXYrTA.s:176    .progmem.data:00000014 ManufacturerString
     /tmp/cceXYrTA.s:160    .progmem.data:00000000 ProductString
     /tmp/cceXYrTA.s:232    .progmem.data:0000004c DeviceDescriptor

NO UNDEFINED SYMBOLS
