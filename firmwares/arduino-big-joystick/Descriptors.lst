   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  41:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  42:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  43:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  44:Descriptors.c ****  *  more details on HID report descriptors.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM JoystickReport[] =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)                       */
  49:Descriptors.c **** 	0x09, 0x04,          /* Usage (Joystick)                                   */
  50:Descriptors.c **** 
  51:Descriptors.c **** 	0xa1, 0x01,          /* Collection (Application)                           */
  52:Descriptors.c **** 	0x09, 0x01,          /*   Usage (Pointer)                                  */
  53:Descriptors.c **** 
  54:Descriptors.c **** 	/* 8 axes, signed 16 bit resolution, range -32768 to 32767 (16 bytes) */
  55:Descriptors.c **** 	0xa1, 0x00,          /*   Collection (Physical)                            */
  56:Descriptors.c **** 	0x05, 0x01,          /*     Usage Page (Generic Desktop)                   */
  57:Descriptors.c **** 	0x09, 0x30,          /*     Usage (X)                                      */
  58:Descriptors.c **** 	0x09, 0x31,          /*     Usage (Y)                                      */
  59:Descriptors.c **** 	0x09, 0x32,          /*     Usage (Analog1)                                */
  60:Descriptors.c **** 	0x09, 0x33,          /*     Usage (Analog2)                                */
  61:Descriptors.c **** 	0x09, 0x34,          /*     Usage (Analog3)                                */
  62:Descriptors.c **** 	0x09, 0x35,          /*     Usage (Analog4)                                */
  63:Descriptors.c **** 	0x09, 0x36,          /*     Usage (Analog5)                                */
  64:Descriptors.c **** 	0x09, 0x37,          /*     Usage (Analog6)                                */
  65:Descriptors.c **** 	0x16, 0x00, 0x80,    /*     Logical Minimum (-32768)                       */
  66:Descriptors.c **** 	0x26, 0xff, 0x7f,    /*     Logical Maximum (32767)                        */
  67:Descriptors.c **** 	0x75, 16,            /*     Report Size (16)                               */
  68:Descriptors.c **** 	0x95, 8,             /*     Report Count (8)                               */
  69:Descriptors.c **** 	0x81, 0x82,          /*     Input (Data, Variable, Absolute, Volatile)     */
  70:Descriptors.c **** 	0xc0,                /*   End Collection                                   */
  71:Descriptors.c **** 
  72:Descriptors.c **** 	/* 40 buttons, value 0=off, 1=on (5 bytes) */
  73:Descriptors.c **** 	0x05, 0x09,          /*   Usage Page (Button)                              */
  74:Descriptors.c **** 	0x19, 1,             /*     Usage Minimum (Button 1)                       */
  75:Descriptors.c **** 	0x29, 40,            /*     Usage Maximum (Button 40)                      */
  76:Descriptors.c **** 	0x15, 0x00,          /*   Logical Minimum (0)                              */
  77:Descriptors.c **** 	0x25, 0x01,          /*   Logical Maximum (1)                              */
  78:Descriptors.c **** 	0x75, 1,             /*   Report Size (1)                                  */
  79:Descriptors.c **** 	0x95, 40,            /*   Report Count (40)                                */
  80:Descriptors.c **** 	0x81, 0x02,          /*   Input (Data, Variable, Absolute)                 */
  81:Descriptors.c **** 	0xc0                 /* End Collection                                     */
  82:Descriptors.c **** };
  83:Descriptors.c **** 
  84:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  85:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  86:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  87:Descriptors.c ****  *  process begins.
  88:Descriptors.c ****  */
  89:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  90:Descriptors.c **** {
  91:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  92:Descriptors.c **** 		
  93:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  94:Descriptors.c **** 	.Class                  = 0x00,
  95:Descriptors.c **** 	.SubClass               = 0x00,
  96:Descriptors.c **** 	.Protocol               = 0x00,
  97:Descriptors.c **** 	
  98:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  99:Descriptors.c **** 		
 100:Descriptors.c **** 	.VendorID               = 0x03EB,
 101:Descriptors.c **** 	.ProductID              = 0x2043,
 102:Descriptors.c **** 	.ReleaseNumber          = 0x0000,
 103:Descriptors.c **** 		
 104:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
 105:Descriptors.c **** 	.ProductStrIndex        = 0x02,
 106:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
 107:Descriptors.c **** 		
 108:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 109:Descriptors.c **** };
 110:Descriptors.c **** 
 111:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 112:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 113:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 114:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 115:Descriptors.c ****  */
 116:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 117:Descriptors.c **** {
 118:Descriptors.c **** 	.Config = 
 119:Descriptors.c **** 		{
 120:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 121:Descriptors.c **** 
 122:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 123:Descriptors.c **** 			.TotalInterfaces        = 1,
 124:Descriptors.c **** 				
 125:Descriptors.c **** 			.ConfigurationNumber    = 1,
 126:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 127:Descriptors.c **** 				
 128:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 129:Descriptors.c **** 			
 130:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 131:Descriptors.c **** 		},
 132:Descriptors.c **** 		
 133:Descriptors.c **** 	.HID_Interface = 
 134:Descriptors.c **** 		{
 135:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 136:Descriptors.c **** 
 137:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 138:Descriptors.c **** 			.AlternateSetting       = 0x00,
 139:Descriptors.c **** 			
 140:Descriptors.c **** 			.TotalEndpoints         = 1,
 141:Descriptors.c **** 				
 142:Descriptors.c **** 			.Class                  = 0x03,
 143:Descriptors.c **** 			.SubClass               = 0x00,
 144:Descriptors.c **** 			.Protocol               = HID_NON_BOOT_PROTOCOL,
 145:Descriptors.c **** 				
 146:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 147:Descriptors.c **** 		},
 148:Descriptors.c **** 
 149:Descriptors.c **** 	.HID_JoystickHID = 
 150:Descriptors.c **** 		{
 151:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
 152:Descriptors.c **** 			
 153:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 154:Descriptors.c **** 			.CountryCode            = 0x00,
 155:Descriptors.c **** 			.TotalReportDescriptors = 1,
 156:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 157:Descriptors.c **** 			.HIDReportLength        = sizeof(JoystickReport)
 158:Descriptors.c **** 		},
 159:Descriptors.c **** 
 160:Descriptors.c **** 	.HID_ReportINEndpoint = 
 161:Descriptors.c **** 		{
 162:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 163:Descriptors.c **** 			
 164:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | JOYSTICK_EPNUM),
 165:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 166:Descriptors.c **** 			.EndpointSize           = JOYSTICK_EPSIZE,
 167:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 168:Descriptors.c **** 		}	
 169:Descriptors.c **** };
 170:Descriptors.c **** 
 171:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 172:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 173:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 174:Descriptors.c ****  */
 175:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 176:Descriptors.c **** {
 177:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 178:Descriptors.c **** 		
 179:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 180:Descriptors.c **** };
 181:Descriptors.c **** 
 182:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 183:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 184:Descriptors.c ****  *  Descriptor.
 185:Descriptors.c ****  */
 186:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 187:Descriptors.c **** {
 188:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(7), .Type = DTYPE_String},
 189:Descriptors.c **** 		
 190:Descriptors.c **** 	.UnicodeString          = L"Arduino"
 191:Descriptors.c **** };
 192:Descriptors.c **** 
 193:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 194:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 195:Descriptors.c ****  *  Descriptor.
 196:Descriptors.c ****  */
 197:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 198:Descriptors.c **** {
 199:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(16), .Type = DTYPE_String},
 200:Descriptors.c **** 		
 201:Descriptors.c **** 	.UnicodeString          = L"Arduino Joystick"
 202:Descriptors.c **** };
 203:Descriptors.c **** 
 204:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 205:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 206:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 207:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 208:Descriptors.c ****  *  USB host.
 209:Descriptors.c ****  */
 210:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 211:Descriptors.c ****                                     const uint8_t wIndex,
 212:Descriptors.c ****                                     void** const DescriptorAddress)
 213:Descriptors.c **** {
  16               		.loc 1 213 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 214:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 214 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 215:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 216:Descriptors.c **** 
 217:Descriptors.c **** 	void*    Address = NULL;
 218:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 219:Descriptors.c **** 
 220:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 220 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L12
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F4      		brne .L14
  37               	.LVL1:
 221:Descriptors.c **** 	{
 222:Descriptors.c **** 		case DTYPE_Device:
 223:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 224:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 225:Descriptors.c **** 			break;
 226:Descriptors.c **** 		case DTYPE_Configuration: 
 227:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 228:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 228 0
  39 0018 82E2      		ldi r24,lo8(34)
  40 001a 90E0      		ldi r25,0
  41               	.LVL2:
 227:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
  42               		.loc 1 227 0
  43 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 229:Descriptors.c **** 			break;
  45               		.loc 1 229 0
  46 0020 00C0      		rjmp .L5
  47               	.LVL3:
  48               	.L4:
 220:Descriptors.c **** 	switch (DescriptorType)
  49               		.loc 1 220 0
  50 0022 2132      		cpi r18,33
  51 0024 3105      		cpc r19,__zero_reg__
  52 0026 01F0      		breq .L7
  53 0028 2232      		cpi r18,34
  54 002a 3105      		cpc r19,__zero_reg__
  55 002c 01F4      		brne .L14
  56               	.LVL4:
 230:Descriptors.c **** 		case DTYPE_String: 
 231:Descriptors.c **** 			switch (DescriptorNumber)
 232:Descriptors.c **** 			{
 233:Descriptors.c **** 				case 0x00: 
 234:Descriptors.c **** 					Address = (void*)&LanguageString;
 235:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 236:Descriptors.c **** 					break;
 237:Descriptors.c **** 				case 0x01: 
 238:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 239:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 240:Descriptors.c **** 					break;
 241:Descriptors.c **** 				case 0x02: 
 242:Descriptors.c **** 					Address = (void*)&ProductString;
 243:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 244:Descriptors.c **** 					break;
 245:Descriptors.c **** 			}
 246:Descriptors.c **** 			
 247:Descriptors.c **** 			break;
 248:Descriptors.c **** 		case DTYPE_HID: 
 249:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 250:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 251:Descriptors.c **** 			break;
 252:Descriptors.c **** 		case DTYPE_Report: 
 253:Descriptors.c **** 			Address = (void*)&JoystickReport;
 254:Descriptors.c **** 			Size    = sizeof(JoystickReport);
  57               		.loc 1 254 0
  58 002e 8AE3      		ldi r24,lo8(58)
  59 0030 90E0      		ldi r25,0
  60               	.LVL5:
 253:Descriptors.c **** 			Address = (void*)&JoystickReport;
  61               		.loc 1 253 0
  62 0032 20E0      		ldi r18,lo8(JoystickReport)
  63 0034 30E0      		ldi r19,hi8(JoystickReport)
 255:Descriptors.c **** 			break;
  64               		.loc 1 255 0
  65 0036 00C0      		rjmp .L5
  66               	.LVL6:
  67               	.L3:
  68 0038 9927      		clr r25
  69               	.LVL7:
 231:Descriptors.c **** 			switch (DescriptorNumber)
  70               		.loc 1 231 0
  71 003a 8130      		cpi r24,1
  72 003c 9105      		cpc r25,__zero_reg__
  73 003e 01F0      		breq .L9
  74 0040 8230      		cpi r24,2
  75 0042 9105      		cpc r25,__zero_reg__
  76 0044 01F0      		breq .L10
  77 0046 892B      		or r24,r25
  78 0048 01F4      		brne .L14
  79               	.LVL8:
  80               	.LBB2:
 235:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  81               		.loc 1 235 0
  82 004a E0E0      		ldi r30,lo8(LanguageString)
  83 004c F0E0      		ldi r31,hi8(LanguageString)
  84 004e 00C0      		rjmp .L15
  85               	.LVL9:
  86               	.L9:
  87               	.LBE2:
  88               	.LBB3:
 239:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  89               		.loc 1 239 0
  90 0050 E0E0      		ldi r30,lo8(ManufacturerString)
  91 0052 F0E0      		ldi r31,hi8(ManufacturerString)
  92 0054 00C0      		rjmp .L15
  93               	.LVL10:
  94               	.L10:
  95               	.LBE3:
  96               	.LBB4:
 243:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  97               		.loc 1 243 0
  98 0056 E0E0      		ldi r30,lo8(ProductString)
  99 0058 F0E0      		ldi r31,hi8(ProductString)
 100               	.LVL11:
 101               	.L15:
 102               	/* #APP */
 103               	 ;  243 "Descriptors.c" 1
 104 005a 8491      		lpm r24, Z
 105               		
 106               	 ;  0 "" 2
 107               	.LVL12:
 108               	/* #NOAPP */
 109               	.LBE4:
 110 005c 90E0      		ldi r25,0
 111               	.LVL13:
 242:Descriptors.c **** 					Address = (void*)&ProductString;
 112               		.loc 1 242 0
 113 005e 9F01      		movw r18,r30
 244:Descriptors.c **** 					break;
 114               		.loc 1 244 0
 115 0060 00C0      		rjmp .L5
 116               	.LVL14:
 117               	.L7:
 250:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 118               		.loc 1 250 0
 119 0062 89E0      		ldi r24,lo8(9)
 120 0064 90E0      		ldi r25,0
 121               	.LVL15:
 249:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 122               		.loc 1 249 0
 123 0066 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 124 0068 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 125               	.LVL16:
 251:Descriptors.c **** 			break;
 126               		.loc 1 251 0
 127 006a 00C0      		rjmp .L5
 128               	.LVL17:
 129               	.L12:
 224:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 130               		.loc 1 224 0
 131 006c 82E1      		ldi r24,lo8(18)
 132 006e 90E0      		ldi r25,0
 133               	.LVL18:
 223:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 134               		.loc 1 223 0
 135 0070 20E0      		ldi r18,lo8(DeviceDescriptor)
 136 0072 30E0      		ldi r19,hi8(DeviceDescriptor)
 137 0074 00C0      		rjmp .L5
 138               	.L14:
 218:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 139               		.loc 1 218 0
 140 0076 80E0      		ldi r24,0
 141 0078 90E0      		ldi r25,0
 217:Descriptors.c **** 	void*    Address = NULL;
 142               		.loc 1 217 0
 143 007a 20E0      		ldi r18,0
 144 007c 30E0      		ldi r19,0
 145               	.LVL19:
 146               	.L5:
 256:Descriptors.c **** 	}
 257:Descriptors.c **** 	
 258:Descriptors.c **** 	*DescriptorAddress = Address;
 147               		.loc 1 258 0
 148 007e FA01      		movw r30,r20
 149 0080 3183      		std Z+1,r19
 150 0082 2083      		st Z,r18
 259:Descriptors.c **** 	return Size;
 260:Descriptors.c **** }
 151               		.loc 1 260 0
 152 0084 0895      		ret
 153               		.cfi_endproc
 154               	.LFE66:
 156               	.global	ProductString
 157               		.section	.progmem.data,"a",@progbits
 160               	ProductString:
 161 0000 22        		.byte	34
 162 0001 03        		.byte	3
 163 0002 4100      		.string	"A"
 164 0004 7200      		.string	"r"
 165 0006 6400      		.string	"d"
 166 0008 7500      		.string	"u"
 167 000a 6900      		.string	"i"
 168 000c 6E00      		.string	"n"
 169 000e 6F00      		.string	"o"
 170 0010 2000      		.string	" "
 171 0012 4A00      		.string	"J"
 172 0014 6F00      		.string	"o"
 173 0016 7900      		.string	"y"
 174 0018 7300      		.string	"s"
 175 001a 7400      		.string	"t"
 176 001c 6900      		.string	"i"
 177 001e 6300      		.string	"c"
 178 0020 6B00      		.string	"k"
 179 0022 00        		.string	""
 180 0023 00        		.string	""
 181               	.global	ManufacturerString
 184               	ManufacturerString:
 185 0024 10        		.byte	16
 186 0025 03        		.byte	3
 187 0026 4100      		.string	"A"
 188 0028 7200      		.string	"r"
 189 002a 6400      		.string	"d"
 190 002c 7500      		.string	"u"
 191 002e 6900      		.string	"i"
 192 0030 6E00      		.string	"n"
 193 0032 6F00      		.string	"o"
 194 0034 00        		.string	""
 195 0035 00        		.string	""
 196               	.global	LanguageString
 199               	LanguageString:
 200 0036 04        		.byte	4
 201 0037 03        		.byte	3
 202 0038 0904      		.word	1033
 203               	.global	ConfigurationDescriptor
 206               	ConfigurationDescriptor:
 207 003a 09        		.byte	9
 208 003b 02        		.byte	2
 209 003c 2200      		.word	34
 210 003e 01        		.byte	1
 211 003f 01        		.byte	1
 212 0040 00        		.byte	0
 213 0041 C0        		.byte	-64
 214 0042 32        		.byte	50
 215 0043 09        		.byte	9
 216 0044 04        		.byte	4
 217 0045 00        		.byte	0
 218 0046 00        		.byte	0
 219 0047 01        		.byte	1
 220 0048 03        		.byte	3
 221 0049 00        		.byte	0
 222 004a 00        		.byte	0
 223 004b 00        		.byte	0
 224 004c 09        		.byte	9
 225 004d 21        		.byte	33
 226 004e 1101      		.word	273
 227 0050 00        		.byte	0
 228 0051 01        		.byte	1
 229 0052 22        		.byte	34
 230 0053 3A00      		.word	58
 231 0055 07        		.byte	7
 232 0056 05        		.byte	5
 233 0057 81        		.byte	-127
 234 0058 03        		.byte	3
 235 0059 0800      		.word	8
 236 005b 0A        		.byte	10
 237               	.global	DeviceDescriptor
 240               	DeviceDescriptor:
 241 005c 12        		.byte	18
 242 005d 01        		.byte	1
 243 005e 1001      		.word	272
 244 0060 00        		.byte	0
 245 0061 00        		.byte	0
 246 0062 00        		.byte	0
 247 0063 08        		.byte	8
 248 0064 EB03      		.word	1003
 249 0066 4320      		.word	8259
 250 0068 0000      		.word	0
 251 006a 01        		.byte	1
 252 006b 02        		.byte	2
 253 006c 00        		.byte	0
 254 006d 01        		.byte	1
 255               	.global	JoystickReport
 258               	JoystickReport:
 259 006e 05        		.byte	5
 260 006f 01        		.byte	1
 261 0070 09        		.byte	9
 262 0071 04        		.byte	4
 263 0072 A1        		.byte	-95
 264 0073 01        		.byte	1
 265 0074 09        		.byte	9
 266 0075 01        		.byte	1
 267 0076 A1        		.byte	-95
 268 0077 00        		.byte	0
 269 0078 05        		.byte	5
 270 0079 01        		.byte	1
 271 007a 09        		.byte	9
 272 007b 30        		.byte	48
 273 007c 09        		.byte	9
 274 007d 31        		.byte	49
 275 007e 09        		.byte	9
 276 007f 32        		.byte	50
 277 0080 09        		.byte	9
 278 0081 33        		.byte	51
 279 0082 09        		.byte	9
 280 0083 34        		.byte	52
 281 0084 09        		.byte	9
 282 0085 35        		.byte	53
 283 0086 09        		.byte	9
 284 0087 36        		.byte	54
 285 0088 09        		.byte	9
 286 0089 37        		.byte	55
 287 008a 16        		.byte	22
 288 008b 00        		.byte	0
 289 008c 80        		.byte	-128
 290 008d 26        		.byte	38
 291 008e FF        		.byte	-1
 292 008f 7F        		.byte	127
 293 0090 75        		.byte	117
 294 0091 10        		.byte	16
 295 0092 95        		.byte	-107
 296 0093 08        		.byte	8
 297 0094 81        		.byte	-127
 298 0095 82        		.byte	-126
 299 0096 C0        		.byte	-64
 300 0097 05        		.byte	5
 301 0098 09        		.byte	9
 302 0099 19        		.byte	25
 303 009a 01        		.byte	1
 304 009b 29        		.byte	41
 305 009c 28        		.byte	40
 306 009d 15        		.byte	21
 307 009e 00        		.byte	0
 308 009f 25        		.byte	37
 309 00a0 01        		.byte	1
 310 00a1 75        		.byte	117
 311 00a2 01        		.byte	1
 312 00a3 95        		.byte	-107
 313 00a4 28        		.byte	40
 314 00a5 81        		.byte	-127
 315 00a6 02        		.byte	2
 316 00a7 C0        		.byte	-64
 317               		.text
 318               	.Letext0:
 319               		.file 2 "/usr/lib/avr/include/stdint.h"
 320               		.file 3 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 321               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 322               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 323               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
     /tmp/ccrwqrGp.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccrwqrGp.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccrwqrGp.s:4      *ABS*:0000003f __SREG__
     /tmp/ccrwqrGp.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccrwqrGp.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccrwqrGp.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
     /tmp/ccrwqrGp.s:206    .progmem.data:0000003a ConfigurationDescriptor
     /tmp/ccrwqrGp.s:258    .progmem.data:0000006e JoystickReport
     /tmp/ccrwqrGp.s:199    .progmem.data:00000036 LanguageString
     /tmp/ccrwqrGp.s:184    .progmem.data:00000024 ManufacturerString
     /tmp/ccrwqrGp.s:160    .progmem.data:00000000 ProductString
     /tmp/ccrwqrGp.s:240    .progmem.data:0000005c DeviceDescriptor

NO UNDEFINED SYMBOLS
